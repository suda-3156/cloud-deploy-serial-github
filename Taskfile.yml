version: "3"

tasks:
  default:
    cmds:
      - task -l --sort none
    silent: true

  init:
    desc: Initialize for Cloud Deploy
    cmds:
      - |
        gcloud iam service-accounts add-iam-policy-binding \
          "projects/{{.PROJECT_ID_PREFIX}}-pipeline/serviceAccounts/releaser@{{.PROJECT_ID_PREFIX}}-pipeline.iam.gserviceaccount.com" \
          --member "user:$(gcloud config get account)" \
          --role roles/iam.serviceAccountTokenCreator
        gcloud iam service-accounts add-iam-policy-binding \
          "projects/{{.PROJECT_ID_PREFIX}}-pipeline/serviceAccounts/stg-promoter@{{.PROJECT_ID_PREFIX}}-pipeline.iam.gserviceaccount.com" \
          --member "user:$(gcloud config get account)" \
          --role roles/iam.serviceAccountTokenCreator
        gcloud iam service-accounts add-iam-policy-binding \
          "projects/{{.PROJECT_ID_PREFIX}}-pipeline/serviceAccounts/prod-promoter@{{.PROJECT_ID_PREFIX}}-pipeline.iam.gserviceaccount.com" \
          --member "user:$(gcloud config get account)" \
          --role roles/iam.serviceAccountTokenCreator
    requires:
      vars: [PROJECT_ID_PREFIX]

  build:
    desc: "Build the container image and push to Artifact Registry \t usage: task build APP_VERSION=\"1.0.0\""
    dir: ./deploy
    vars:
      APP_VERSION: "{{.APP_VERSION}}"
    cmds:
      - |
        if [ -z "{{.APP_VERSION}}" ]; then
          echo "APP_VERSION is not set. Please set APP_VERSION environment variable."
          exit 1
        fi
        echo "Building version: {{.APP_VERSION}}"
        gcloud config set auth/impersonate_service_account "releaser@{{.PROJECT_ID_PREFIX}}-pipeline.iam.gserviceaccount.com"
        export APP_VERSION="{{.APP_VERSION}}"
        skaffold build \
          --filename skaffold.yaml \
          --default-repo "{{.REGION}}-docker.pkg.dev/{{.PROJECT_ID_PREFIX}}-pipeline/pipeline-repo" \
          --file-output artifacts.json
        gcloud config unset auth/impersonate_service_account
    requires:
      vars: [PROJECT_ID_PREFIX, REGION, APP_VERSION]

  create:release:
    desc: "Create release without initial rollout \t usage: task create:release RELEASE_NAME=v1-0-0"
    dir: ./deploy
    vars:
      RELEASE_NAME: "{{.RELEASE_NAME}}"
    cmds:
      - |
        if [ -z "{{.RELEASE_NAME}}" ]; then
          echo "RELEASE_NAME is not set. Please set RELEASE_NAME environment variable."
          exit 1
        fi
        echo "Creating release: {{.RELEASE_NAME}}"
        gcloud deploy releases create "{{.RELEASE_NAME}}" \
          --region="{{.REGION}}" \
          --delivery-pipeline="app-pipeline" \
          --gcs-source-staging-dir "gs://{{.PROJECT_ID_PREFIX}}-pipeline-storage/app/source" \
          --build-artifacts artifacts.json \
          --skaffold-file skaffold.yaml \
          --disable-initial-rollout \
          --project="{{.PROJECT_ID_PREFIX}}-pipeline" \
          --impersonate-service-account "releaser@{{.PROJECT_ID_PREFIX}}-pipeline.iam.gserviceaccount.com"
    requires:
      vars: [PROJECT_ID_PREFIX, REGION]

  deploy:dev:
    desc: "Deploy to dev environment \t usage: task deploy:dev RELEASE_NAME=v1-0-0"
    dir: ./deploy
    vars:
      RELEASE_NAME: "{{.RELEASE_NAME}}"
    cmds:
      - |
        if [ -z "{{.RELEASE_NAME}}" ]; then
          echo "RELEASE_NAME is not set. Please set RELEASE_NAME environment variable."
          exit 1
        fi
        echo "Creating release: {{.RELEASE_NAME}}"
        gcloud deploy releases create "{{.RELEASE_NAME}}" \
          --region="{{.REGION}}" \
          --delivery-pipeline="app-pipeline" \
          --gcs-source-staging-dir "gs://{{.PROJECT_ID_PREFIX}}-pipeline-storage/app/source" \
          --build-artifacts artifacts.json \
          --skaffold-file skaffold.yaml \
          --enable-initial-rollout \
          --project="{{.PROJECT_ID_PREFIX}}-pipeline" \
          --impersonate-service-account "releaser@{{.PROJECT_ID_PREFIX}}-pipeline.iam.gserviceaccount.com"
    requires:
      vars: [PROJECT_ID_PREFIX, REGION]

  deploy:stg:
    desc: "Promote to staging environment \t usage: task deploy:stg RELEASE_NAME=v1-0-0"
    vars:
      RELEASE_NAME: "{{.RELEASE_NAME}}"
    cmds:
      - |
        if [ -z "{{.RELEASE_NAME}}" ]; then
          echo "RELEASE_NAME is not set. Please set RELEASE_NAME environment variable."
          exit 1
        fi
        echo "Promoting release: {{.RELEASE_NAME}} to staging"
        gcloud deploy releases promote \
          --release "{{.RELEASE_NAME}}" \
          --delivery-pipeline="app-pipeline" \
          --region="{{.REGION}}" \
          --project="{{.PROJECT_ID_PREFIX}}-pipeline" \
          --impersonate-service-account "stg-promoter@{{.PROJECT_ID_PREFIX}}-pipeline.iam.gserviceaccount.com"
    requires:
      vars: [PROJECT_ID_PREFIX, REGION]

  deploy:prod:
    desc: "Promote to production environment \t usage: task deploy:prod RELEASE_NAME=v1-0-0"
    vars:
      RELEASE_NAME: "{{.RELEASE_NAME}}"
    cmds:
      - |
        if [ -z "{{.RELEASE_NAME}}" ]; then
          echo "RELEASE_NAME is not set. Please set RELEASE_NAME environment variable."
          exit 1
        fi
        echo "Promoting release: {{.RELEASE_NAME}} to production"
        gcloud deploy releases promote \
          --release "{{.RELEASE_NAME}}" \
          --delivery-pipeline="app-pipeline" \
          --region="{{.REGION}}" \
          --project="{{.PROJECT_ID_PREFIX}}-pipeline" \
          --impersonate-service-account "prod-promoter@{{.PROJECT_ID_PREFIX}}-pipeline.iam.gserviceaccount.com"
    requires:
      vars: [PROJECT_ID_PREFIX, REGION]

  rollouts:list:
    desc: "List all rollouts in the delivery pipeline \t usage: task rollouts:list"
    vars:
      RELEASE_NAME: "{{.RELEASE_NAME}}"
    cmds:
      - |
        if [ -z "{{.RELEASE_NAME}}" ]; then
          echo "RELEASE_NAME is not set. Please set RELEASE_NAME environment variable."
          exit 1
        fi
        echo "Listing rollouts for release: {{.RELEASE_NAME}}"
        gcloud deploy rollouts list \
          --release="{{.RELEASE_NAME}}" \
          --delivery-pipeline="app-pipeline" \
          --region="{{.REGION}}" \
          --project="{{.PROJECT_ID_PREFIX}}-pipeline" \
          --format="table(createTime, name, targetId, state)"
    requires:
      vars: [PROJECT_ID_PREFIX, REGION]

  rollback:dev:
    desc: "Rollback dev environment to previous successful rollout \t usage: task rollback:dev"
    cmds:
      - |
        gcloud deploy targets rollback dev-target \
          --delivery-pipeline="app-pipeline" \
          --region="{{.REGION}}" \
          --project="{{.PROJECT_ID_PREFIX}}-pipeline" \
          --impersonate-service-account "releaser@{{.PROJECT_ID_PREFIX}}-pipeline.iam.gserviceaccount.com"
    requires:
      vars: [PROJECT_ID_PREFIX, REGION]

  rollback:stg:
    desc: "Rollback staging environment to previous successful rollout \t usage: task rollback:stg"
    cmds:
      - |
        gcloud deploy targets rollback stg-target \
          --delivery-pipeline="app-pipeline" \
          --region="{{.REGION}}" \
          --project="{{.PROJECT_ID_PREFIX}}-pipeline" \
          --impersonate-service-account "stg-promoter@{{.PROJECT_ID_PREFIX}}-pipeline.iam.gserviceaccount.com"
    requires:
      vars: [PROJECT_ID_PREFIX, REGION]

  rollback:prod:
    desc: "Rollback production environment to previous successful rollout \t usage: task rollback:prod"
    cmds:
      - |
        gcloud deploy targets rollback prod-target \
          --delivery-pipeline="app-pipeline" \
          --region="{{.REGION}}" \
          --project="{{.PROJECT_ID_PREFIX}}-pipeline" \
          --impersonate-service-account "prod-promoter@{{.PROJECT_ID_PREFIX}}-pipeline.iam.gserviceaccount.com"
    requires:
      vars: [PROJECT_ID_PREFIX, REGION]

  releases:list:
    desc: "List all releases in the delivery pipeline"
    cmds:
      - |
        gcloud deploy releases list \
          --delivery-pipeline="app-pipeline" \
          --region="{{.REGION}}" \
          --project="{{.PROJECT_ID_PREFIX}}-pipeline" \
          --format="table(createTime, name)"
    requires:
      vars: [PROJECT_ID_PREFIX, REGION]

  releases:delete:
    desc: "Delete a release \t usage: task releases:delete RELEASE_NAME=v1-0-0"
    vars:
      RELEASE_NAME: "{{.RELEASE_NAME}}"
    cmds:
      - |
        if [ -z "{{.RELEASE_NAME}}" ]; then
          echo "RELEASE_NAME is not set. Please set RELEASE_NAME environment variable."
          exit 1
        fi
        echo "Deleting release: {{.RELEASE_NAME}}"
        gcloud deploy releases abandon "{{.RELEASE_NAME}}" \
          --delivery-pipeline="app-pipeline" \
          --region="{{.REGION}}" \
          --project="{{.PROJECT_ID_PREFIX}}-pipeline"
    requires:
      vars: [PROJECT_ID_PREFIX, REGION]
